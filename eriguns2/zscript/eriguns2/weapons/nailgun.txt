/*
 * eriguns2: nailgun
 * (c) xaser 2017
 * sprites (c) Amuscaria
 */

class EriNailgun : HellWeapon replaces Chaingun
{
	bool fireSide;

	Default
	{
		Scale 0.8;
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "NailAmmo";
		Weapon.SisterWeapon "EriNailgunPowered";
		Inventory.PickupMessage "$GOTNAILGUN";
		Tag "$TAG_NAILGUN";
	}
	States
	{
	Ready:
		HNAG A 1 A_WeaponReady();
		Loop;
	Deselect:
		HNAG A 1 A_Lower();
		Loop;
	Select:
		HNAG A 1 A_Raise();
		Loop;
	Fire:
		HNAF A 0 Bright X_FireNailgun();
	FireLeft:
		HNAF AB 2 Bright;
		HNAG A 2;
		Goto Ready;
	FireRight:
		HNAF CD 2 Bright;
		HNAG A 2;
		Goto Ready;
	Flash:
		TNT1 A 1 Bright A_Light(2);
		TNT1 A 2 Bright A_Light(1);
		Goto LightDone;
	Spawn:
		HENG A -1;
		Stop;
	}

	action state X_FireNailgun()
	{
		state returnState;
		invoker.fireSide = !invoker.fireSide;
		if(invoker.fireside) {
			A_FireProjectile("Nail", 0, 1, -4);
			A_PlaySound("weapons/nailbone1", CHAN_WEAPON);
			returnState = ResolveState("FireLeft");
		} else {
			A_FireProjectile("Nail", 0, 1, 4);
			A_PlaySound("weapons/nailbone2", CHAN_WEAPON);
			returnState = ResolveState("FireRight");
		}
		A_GunFlash();
		A_PlaySound("weapons/nailgunextra", CHAN_VOICE, 0.5);
		return returnState;
	}
}

class EriNailgunPowered : EriNailgun
{
	Default
	{
		Weapon.AmmoUse 4;
		Weapon.AmmoGive 0;
		Weapon.SisterWeapon "EriNailgun";
		+WEAPON.POWERED_UP;
	}
	States
	{
	Fire:
		HNAF E 2 Bright X_FireNailgunPow();
		HNAF F 2 Bright;
		HNAG EAA 2;
		Goto Ready;
	}

	action void X_FireNailgunPow()
	{
		A_PlaySound("weapons/nailbone3", CHAN_WEAPON);
		A_PlaySound("weapons/nailgunextra", CHAN_VOICE, 1.0);
		A_FireProjectile("SuperNail", 0, 0, -3);
		A_FireProjectile("SuperNail", 0, 1,  3);
	}
}

class EriNailgunMana : EriNailgun replaces CWeapStaff
{
	Default
	{
		Weapon.AmmoGive 25;
		Weapon.AmmoType "Mana1";
		Weapon.SisterWeapon "EriNailgunManaPowered";
	}
}

class EriNailgunManaPowered : EriNailgunPowered
{
	Default
	{
		Weapon.AmmoType "Mana1";
		Weapon.SisterWeapon "EriNailgunMana";
		+WEAPON.POWERED_UP;
	}
}

class EriNailgunGiver : WeaponGiver
{
	Default
	{
		Inventory.PickupMessage "$GOTNAILGUN";
		DropItem "EriNailgun";
	}
	States
	{
	Spawn:
		HENG A -1;
		Stop;
	}
}

class EriNailgunSpawner : ActorSpawner
{
	Default
	{
		ActorSpawner.SpawnClass "EriNailgun";
	}
}

class EriNailgunHeretic : EriNailgunSpawner replaces Blaster    {}
class EriNailgunStrife  : EriNailgunSpawner replaces AssaultGun {}
class EriNailgunStrife2 : EriNailgunSpawner replaces AssaultGunStanding
{
	States
	{
	Spawn:
		HENG B -1;
		Stop;
	}
}

class Nail : FastProjectile
{
	Vector3 startVel;
	int pierceCount;
	int pierceTics;
	int bloodTics;

	property PierceCount:pierceCount;

	Default
	{
		Radius 4;
		Height 8;
		Speed 40;
		Damage 4;
		Projectile;
		Scale 0.75;
		MissileType "NailTrail";
		MissileHeight 8;
		SeeSound "weapons/nailgunfire";
		Obituary "$OB_MPNAILGUN";
		Decal "BulletChip";
		Nail.PierceCount 1;
		+THRUACTORS;
		+NODAMAGETHRUST;
		+BLOODSPLATTER;
	}
	States
	{
	Spawn:
		NAIL A 1 NoDelay X_NailFly();
		Loop;
	Death:
	Crash:
		PUFF A 3 X_NailMiss();
		PUFF BCD 3;
		Stop;
	XDeath:
		TNT1 A 1 X_NailHit();
		Stop;
	}

	override void PostBeginPlay()
	{
		self.startVel = self.vel;
	}

	state X_NailInit()
	{
		self.startVel = self.vel;
		return ResolveState("Fly");
	}

	void X_NailFly()
	{
		if(pierceTics <= 0) {
			bThruActors = false;
		}
		if(bloodTics > 0) {
			// [TODO] copy blood color from last target if at all possible D:
			A_SpawnItemEx("NailBlood", frandom(-0.1,0.1), 0, frandom(-0.1,0.1));
		}
		pierceTics--;
		bloodTics--;
	}

	void X_NailMiss()
	{
		A_PlaySound("weapons/nailgunhit");
	}

	void X_NailHit()
	{
		A_PlaySound("weapons/nailgunblood");
		if(self.pierceCount > 0) {
			Actor a;
			bool success;
			[success, a] = A_SpawnItemEx(self.GetClass(), 0, 0, 0, startVel.x, startVel.y, startVel.z, angle, SXF_ABSOLUTEANGLE | SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS);
			let subNail = Nail(a);
			if(subNail) {
				subNail.bThruActors = true;
				subNail.pierceTics = 2;
				subNail.bloodTics = 5;
				subNail.pierceCount = self.pierceCount - 1;
			}
		}
	}
}

class NailBlood : Blood
{
	Default
	{
		Scale 0.5;
		Gravity 0.5;
	}
}

class SuperNail : Nail
{
	Default
	{
		DamageFunction (2);
		SeeSound "";
		Obituary "$OB_MPNAILGUNPOW";
		MissileType "NailTrailHot";
		DamageType "Ripper";
		Nail.PierceCount 0;
		+RIPPER;
		-THRUACTORS;
	}
	States
	{
	Spawn:
	Fly:
		NAIL B -1 Bright;
		Stop;
	Death:
	Crash:
	XDeath:
		PUFF A 3 A_PlaySound("weapons/nailgunhit");
		PUFF BCD 3;
		Stop;
	}
}

class NailTrail : EriTrail
{ 
	Default
	{
		Alpha 0.25;
		Scale 0.5;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		NTRL IACEG 1 Bright;
		Stop;
	}
}

class NailTrailHot : NailTrail
{
	Default
	{
		Alpha 0.5;
		Scale 0.075;
		VSpeed 0.5;
	}
	States
	{
	Spawn:
		HFLM ZABCIJKLM 1 Bright;
		Stop;
	}
}
